(Session:1 to 5)

1.Persistence :  The process of storing 
and managing data for a long period of
time is Persistence.

2.Persistence store : The Place where data
will be saved on permanent basis is called
Persistence Store

3.Purpose of Persistance :The Data stored in Properties allocates memory in JVM of RAM and the memory will be vanished at end of app execution.

4.Persistent Data : The data stored in
Persistence Store.

5.Persistence Operation : Operation
performed on data which needs to be persisted in persistence store.
	
	These Operations are known as CURD/
	SCUD/CRUD Operations.

6.Persistence Technology/Framework/API :
The Technology/Framework/API which we use to develop persistence logic to perform persistence operations on data which needs to be persisted in persistence store.

Limitations of using files as persistence stores

1.Cannot store huge amount of data.

2.No Security.

3.No SQL Support.

4.No Constraints[Null/Primary , Foreign key] Support.

5.Performing select operation with 
multiple conditions is complex.

6.Performing update and delete operation
is complex.

7.Cannot define relationship among files[Because No Support of Foreign Key].

8.Data Merging and comparison is very
complex.

9.Cannot maintain Large Objects [files]
as record values.

All these limitations can be overcomed using RDBMS[Oracle,MySQL,PostgreSQL] DB s/w as persistence stores

Note : ODB[Poet,Versant,etc] s/w is capable of storing objects as DB Table Records [Column Values]

Limitations of ODB s/w
----------------------

1.Different ODB s/w support different programming language objects,hence portability
is impossible.

	Each S/W supports each programming language object

2.Report Generation from ODB s/w is complex.

3.Data Redundency Problem [We can store
Multiple Objects with same data in DB Table of ODB s/w]

4.They are Against Normalization Rules.

	According to 1st rule,Every column value must hold a single value but we can
store an object.

	According to 2nd,3rd rules,we must provide relationship btwn tables of DB
s/w which isn't possible between tables of
ODB s/w.

The Above Limitations of can be overcomed
by using RDBMS s/w with support of o-r
mapping persistence logic.

With support of o-r mapping persistence
logic,we don't store objects as column values but we store data in objects as
column values.

Limitations of Using JDBC Technology to Develop Persistence Logic

1.SQL Queries needs to provided while giving Persistence Logic via JDBC Technology which is dependent for each RDBMS s/w.

2.Because of the above reason,they are not
portable.

3.While providing values to SQL Queries,Java Objects cannot be directly given as column value.

4.JDBC API throws SQLException[Checked Exception] in which developer needs to handle.

5.SQLException is the exception which gets
raised while writing JDBC Code,hence it is difficult to diagnose the exception.

6.ResultSet Object in JDBC API isn't Serializable , hence we cannot transfer them over network.

7.For All kinds of SELECT SQL Queries,we need to process ResultSet Object in different manner which is bit complex.

8.JDBC API doesn't give Default Cache[Temporary Memory which holds Data for Temporary Period]Support b/w Java App and DB s/w.

9.It Doesn't support dynamic schema generation [JDBC cannot generate db tables 
dynamically].

10.No Built in support for Record
Versioning and Record TimeStamping

Record Versioning - Keeps track of how
many times the each record is modified

Record Timestamping - keeps track of when
the record is inserted and lastly 
updated

11.No Built in ID Generators to insert Primary key column directly.

12.Since Web Application is developed using multiple layers,and if we handle SQLException[Checked Exception] via 'try/catch' block, hence the exception is suppressed in the layer and not propagated to the next layer,hence Problem[exception] Diagnosis is complex.So handle exceptions
using 'throws' keyword which propagates the exception to next layer and Problem
Diagnosis becomes easy.

etc...

Most of the Above Limitations can be overcomed by using O-R Mapping Persistence
Logic using ORM Software like Hibernate.

Qn : What is O-R Mapping ?

Ans : Single Line Statement : The Process
of mapping or linking java Class with DB Tables

Definition : The Process of
	1.Mapping java Class with DB Tables
	2.Mapping Java Class Properties with
	Columns of DB Tables
	3.Providing Synchronization between
	Java Class Objects and DB Table and 	vice-versa.

Synchronization :  Modification done in Java Object will be reflected in DB Table and vice versa.

Brief Summary to Develop Java Application
with Hibernate support

1.Prepare Java Bean Class which holds

	a.O-R Mapping Persistence Logic

	b.Persistable Data [To be Inserted/Updated/Deleted in DB Table]
	and Persistent Data [To be retrieved from DB Table]

2.Configuration File[XML or Annotations]:It holds Details of Java Class which is to be provided to Container or server or framework to identify as special code/component.

	Eg : We Provide Java Bean Class Details in a Configuration File to Inform to Hibernate Class to treat the Bean Class as Entity Class and should be mapped with
given DB Table

Note : We don't need to provide SQL Queries while writing O-R Mapping Persistence Logic because ORM s/w like
Hibernate Generates JDBC Code+SQL Queries
dynamically at runtime for the Provided DB
s/w.

Hence we can use this persistence logic to which ever DB s/w we want, hence this persistence
logic becomes Independent Persistence Logic.

(Session- 6 to 10)

In o-r mapping,the objects of Entity Class are Actors playing roles called

	1.inserting record : Saving Data of object to DB Table record.
	2.updating record : Updating Record of DB Table represented by an object.
	3.deleting record : Deleting Record of DB Table represented by an object.
	4.selecting/loading record : Retrieving record of DB Table represented by an
			    object.

FAQ : In O-R Mapping each record is represented by one Object.If DB
      Table holds huge number of records then huge no.of.objects
      will be created which may lead to system crash.How to do you 
      justify this statement?

Ans : 1.ORM s/w doesn't create objects for entity classes when records
      are available in DB Table.
      2.Entity class object gets created when records are selected.
      3.Selecting Huge no.of.records from DB Table at a time is
	programmer's mistake and not ORM s/w.
      4.So while working with ORM s/ws we should retrieve records
	of DB Table part by part

FAQ : What are the Mismatches between java and RDBMS DB s/w?How are they resolved
      by using ORM s/w?

Ans : 
	1.Java Entity Class can be in Inheritance Relationship but DB Table 
	cannot be in Inheritance Relationship.

	Solution : To Map Java Class with Inheritance Relationship to
	one or more DB Tables we need "Special Inheritance" mapping.

	2.Java Entity Class can be in Composition[Has-A Relationship]
	but DB Tables cannot be in Composition.

	Solution : To Map Java Class with Composition to
	one or more DB Tables we need "Special Component" mapping.

	3.Java Entity Class can be taken having List/Set/Map as Collection
	Properties.DB Table do not support Collections.

	Solution : To Map Java Class with Collections Properties to
	one or more DB Tables we need "Special Collection"mapping.

	4.DB Tables will be kept in Association using Foreign Key Columns.
	Java Class can be kept in Relationship with the help of Composition and
	Collections.

	Solution : To Map Java Class Relationship with DB Table in Relationship
	we need "Association Mapping".

FAQ : Is JDBC Outdated? If it isn't then where we must use JDBC and where we must
      use ORM Framework like Hibernate to develop Persistence Logics?

Ans : JDBC is not Outdated.It is utilized internally in projects.All ORM Frameworks
internally uses JDBC Code to Perform Persistence Operations.

	If we want to perform persistence operations with large amount of 
	Data to DB s/w at a time then prefer JDBC over ORM f/w because for
	all records,JDBC creates only one ResultSet Object where as ORM s/w
	creates object for each record which may crash the application

	If we want to perform persistence operations with small amount of 
	Data to DB s/w at a time then prefer ORM f/w over because less objects
	will be created for less records in ORM s/w and also we can use features
	like DB Portability,Caching,Versioning,Timestamping,Dynamic Schema Generation
	,etc.. where as these features are unavailable in JDBC

FAQ : What is a POJO Class?

Ans : A Java Class which implements or extends only Predefined Libraries of Java
      Programming Language and doesn't implement or extends Predefined Libraries of
      Technology or Framework is known as POJO Class.
     
Note : 1.POJO Class are not against inheritance or implementing interfaces,they are
	against extending and Implementing Technology/Framework API Specific Class and
	Interface.

	2.POJO Class can hold pre-defined methods/logics of technolgy and
	framework.

	3.Annotations can be provided for POJO Class

	4.A Framework/Technology is said to be non-invasive only when its
	class are POJO Class

	


